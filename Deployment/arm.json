{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "resourcesName": {
      "type": "string",
      "minLength": 2,
      "metadata": {
        "description": "Name of resources to be deployed."
      }
    },
    "adminUsername": {
      "type": "string",
      "minLength": 2,
      "metadata": {
        "description": "Username for the Virtual Machine."
      }
    },
    "adminPassword": {
      "type": "secureString",
      "minLength": 12,
      "metadata": {
        "description": "Password for the Virtual Machine."
      }
    }
  },
  "variables": {
    "addressPrefix": "10.0.0.0/16",
    "subnetPrefix": "10.0.0.0/24",
    "subnetPrefix2": "10.0.0.0/23",
    "keyVaultSecretsUserId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', variables('azureRbacAzurekeyVaultSecretsUser'))]",
    "authRuleResourceId": "[resourceId('Microsoft.EventHub/namespaces/authorizationRules', concat(parameters('resourcesName'), '-EventHubs'), 'RootManageSharedAccessKey')]",
    "azureRbacContributor": "b24988ac-6180-42a0-ab88-20f7382dd24c",
    "azureRbacAzureEventHubsDataOwner": "f526a384-b230-433a-b45c-95f59c4a2dec",
    "azureRbacAzurekeyVaultSecretsUser": "4633458b-17de-408a-b874-0445c86b69e6",
    "adxClusterName": "[concat(parameters('resourcesName'), 'ADX')]",
    "adxDBName": "[concat(parameters('resourcesName'), '-DB')]",
    "eventHubsNamespaceName": "[concat(parameters('resourcesName'), '-EventHubs')]"
  },
  "resources": [
    {
      "type": "Microsoft.App/managedEnvironments",
      "apiVersion": "2024-03-01",
      "name": "[concat(parameters('resourcesName'), '-AppEnvironment')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "appLogsConfiguration": {},
        "workloadProfiles": [
          {
            "workloadProfileType": "Consumption",
            "name": "Consumption"
          }
        ],
        "vnetConfiguration": {
          "infrastructureSubnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', concat(parameters('resourcesName'), '-Network-CA'), concat(parameters('resourcesName'), '-Subnet-CA'))]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', concat(parameters('resourcesName'), '-Network-CA'))]",
        "[resourceId('Microsoft.KeyVault/vaults', concat(parameters('resourcesName'), '-KV'))]"
      ]
    },
    {
      "type": "Microsoft.App/containerApps",
      "apiVersion": "2024-03-01",
      "name": "[concat(parameters('resourcesName'), '-edc-provider')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "workloadProfileName": "Consumption",
        "managedEnvironmentId": "[resourceId('Microsoft.App/managedEnvironments', concat(parameters('resourcesName'), '-AppEnvironment'))]",
        "configuration": {
          "ingress": {
            "external": true,
            "transport": "Tcp",
            "targetPort": 8181,
            "allowInsecure": false,
            "additionalPortMappings": [
              {
                "external": true,
                "targetPort": 8182
              },
              {
                "external": true,
                "targetPort": 8281
              },
              {
                "external": true,
                "targetPort": 8282
              }
            ],
            "traffic": [
              {
                "latestRevision": true,
                "weight": 100
              }
            ]
          }
        },
        "template": {
          "revisionSuffix": "firstrevision",
          "containers": [
            {
              "name": "edc-producer",
              "image": "fraunhoferiosb/edc-extension4aas:2.2.1",
              "env": [
                {
                  "name": "JAVA_OPTS",
                  "value": "-XX:MaxRAMPercentage=50.0"
                },
                {
                  "name": "edc_aas_syncPeriod",
                  "value": "60"
                },
                {
                  "name": "edc_dataplane_aas_acceptOwnSelfSignedCertificates",
                  "value": "true"
                },
                {
                  "name": "edc_transfer_functions_enabled_protocols",
                  "value": "http"
                },
                {
                  "name": "web_http_port",
                  "value": "8281"
                },
                {
                  "name": "web_http_path",
                  "value": "/api"
                },
                {
                  "name": "web_http_control_port",
                  "value": "8181"
                },
                {
                  "name": "web_http_control_path",
                  "value": "/control"
                },
                {
                  "name": "web_http_management_port",
                  "value": "8182"
                },
                {
                  "name": "web_http_management_path",
                  "value": "/management"
                },
                {
                  "name": "web_http_protocol_port",
                  "value": "8282"
                },
                {
                  "name": "web_http_protocol_path",
                  "value": "/dsp"
                },
                {
                  "name": "edc_dsp_callback_address",
                  "value": "[concat('http://', reference(concat(parameters('resourcesName'), '-AppEnvironment')).staticIp, ':8282/dsp')]"
                },
                {
                  "name": "edc_api_auth_key",
                  "value": "password"
                },
                {
                  "name": "edc_web_rest_cors_enabled",
                  "value": "true"
                },
                {
                  "name": "edc_web_rest_cors_origins",
                  "value": "*"
                },
                {
                  "name": "edc_web_rest_cors_headers",
                  "value": "x-api-key, content-type"
                },
                {
                  "name": "edc_web_rest_cors_methods",
                  "value": "GET, POST, DELETE, PUT, OPTIONS"
                },
                {
                  "name": "edc_transfer_proxy_token_verifier_publickey_alias",
                  "value": "public-key"
                },
                {
                  "name": "edc_transfer_proxy_token_signer_privatekey_alias",
                  "value": "private-key"
                },
                {
                  "name": "edc_hostname",
                  "value": "[reference(concat(parameters('resourcesName'), '-AppEnvironment')).staticIp]"
                },
                {
                  "name": "edc_participant_id",
                  "value": "provider"
                }
              ],
              "resources": {
                "cpu": "2",
                "memory": "4Gi"
              }
            }
          ],
          "scale": {
            "minReplicas": "1",
            "maxReplicas": "1"
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.App/managedEnvironments', concat(parameters('resourcesName'), '-AppEnvironment'))]"
      ]
    },
    {
      "type": "Microsoft.App/containerApps",
      "apiVersion": "2024-03-01",
      "name": "[concat(parameters('resourcesName'), '-edc-consumer')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "workloadProfileName": "Consumption",
        "managedEnvironmentId": "[resourceId('Microsoft.App/managedEnvironments', concat(parameters('resourcesName'), '-AppEnvironment'))]",
        "configuration": {
          "ingress": {
            "external": true,
            "transport": "Tcp",
            "targetPort": 9191,
            "allowInsecure": false,
            "additionalPortMappings": [
              {
                "external": true,
                "targetPort": 9192
              },
              {
                "external": true,
                "targetPort": 9291
              },
              {
                "external": true,
                "targetPort": 9292
              }
            ],
            "traffic": [
              {
                "latestRevision": true,
                "weight": 100
              }
            ]
          }
        },
        "template": {
          "revisionSuffix": "firstrevision",
          "containers": [
            {
              "name": "edc-consumer",
              "image": "fraunhoferiosb/edc-extension4aas:2.2.1",
              "env": [
                {
                  "name": "edc_aas_exposeSelfDescription",
                  "value": "false"
                },
                {
                  "name": "edc_client_acceptAllProviderOffers",
                  "value": "true"
                },
                {
                  "name": "web_http_port",
                  "value": "9291"
                },
                {
                  "name": "web_http_path",
                  "value": "/api"
                },
                {
                  "name": "web_http_control_port",
                  "value": "9191"
                },
                {
                  "name": "web_http_control_path",
                  "value": "/control"
                },
                {
                  "name": "web_http_management_port",
                  "value": "9192"
                },
                {
                  "name": "web_http_management_path",
                  "value": "/management"
                },
                {
                  "name": "web_http_protocol_port",
                  "value": "9292"
                },
                {
                  "name": "web_http_protocol_path",
                  "value": "/dsp"
                },
                {
                  "name": "edc_dsp_callback_address",
                  "value": "[concat('http://', reference(concat(parameters('resourcesName'), '-AppEnvironment')).staticIp, ':9292/dsp')]"
                },
                {
                  "name": "edc_api_auth_key",
                  "value": "password"
                },
                {
                  "name": "edc_web_rest_cors_enabled",
                  "value": "true"
                },
                {
                  "name": "edc_web_rest_cors_origins",
                  "value": "*"
                },
                {
                  "name": "edc_web_rest_cors_headers",
                  "value": "x-api-key, content-type"
                },
                {
                  "name": "edc_web_rest_cors_methods",
                  "value": "GET, POST, DELETE, PUT, OPTIONS"
                },
                {
                  "name": "edc_transfer_proxy_token_verifier_publickey_alias",
                  "value": "public-key"
                },
                {
                  "name": "edc_transfer_proxy_token_signer_privatekey_alias",
                  "value": "private-key"
                },
                {
                  "name": "edc_hostname",
                  "value": "[reference(concat(parameters('resourcesName'), '-AppEnvironment')).staticIp]"
                },
                {
                  "name": "edc_participant_id",
                  "value": "consumer"
                }
              ],
              "resources": {
                "cpu": "0.5",
                "memory": "1Gi"
              }
            }
          ],
          "scale": {
            "minReplicas": "1",
            "maxReplicas": "1"
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.App/managedEnvironments', concat(parameters('resourcesName'), '-AppEnvironment'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2024-12-01-preview",
      "name": "[concat(parameters('resourcesName'), '-KV')]",
      "location": "[resourceGroup().location]",
      "tags": {},
      "properties": {
        "tenantId": "[subscription().tenantId]",
        "accessPolicies": [],
        "enableRbacAuthorization": true,
        "enableSoftDelete": true,
        "enabledForTemplateDeployment": true,
        "softDeleteRetentionInDays": "90",
        "publicNetworkAccess": "Disabled",
        "enablePurgeProtection": true,
        "networkAcls": {
          "bypass": "AzureServices",
          "defaultAction": "Deny",
          "ipRules": [],
          "virtualNetworkRules": []
        },
        "sku": {
          "family": "A",
          "name": "standard"
        }
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2024-12-01-preview",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', concat(parameters('resourcesName'), '-KV'))]"
      ],
      "name": "[format('{0}/{1}', concat(parameters('resourcesName'), '-KV'), 'watttimepassword')]",
      "properties": {
        "value": "<yourpassword>"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2024-12-01-preview",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', concat(parameters('resourcesName'), '-KV'))]"
      ],
      "name": "[format('{0}/{1}', concat(parameters('resourcesName'), '-KV'), 'adminpassword')]",
      "properties": {
        "value": "[parameters('adminPassword')]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2024-12-01-preview",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', concat(parameters('resourcesName'), '-KV'))]"
      ],
      "name": "[format('{0}/{1}', concat(parameters('resourcesName'), '-KV'), 'brokerpassword')]",
      "properties": {
        "value": "[listkeys(variables('authRuleResourceId'), '2015-08-01').primaryConnectionString]"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2024-12-01-preview",
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', concat(parameters('resourcesName'), '-KV'))]"
      ],
      "name": "[format('{0}/{1}', concat(parameters('resourcesName'), '-KV'), 'servicepassword')]",
      "properties": {
        "value": "[parameters('adminPassword')]"
      }
    },
    {
      "type": "Microsoft.App/containerApps",
      "apiVersion": "2024-03-01",
      "name": "[concat(parameters('resourcesName'), '-aas-repository')]",
      "location": "[resourceGroup().location]",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', concat(parameters('resourcesName'), '-Identity'))]": {}
        }
      },
      "properties": {
        "workloadProfileName": "Consumption",
        "managedEnvironmentId": "[resourceId('Microsoft.App/managedEnvironments', concat(parameters('resourcesName'), '-AppEnvironment'))]",
        "configuration": {
          "secrets": [
            {
              "name": "watttimepassword",
              "keyVaultUrl": "[concat('https://', parameters('resourcesName'), '-KV.vault.azure.net/secrets/watttimepassword')]",
              "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', concat(parameters('resourcesName'), '-Identity'))]"
            },
            {
              "name": "servicepassword",
              "keyVaultUrl": "[concat('https://', parameters('resourcesName'), '-KV.vault.azure.net/secrets/servicepassword')]",
              "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', concat(parameters('resourcesName'), '-Identity'))]"
            }
          ],
          "ingress": {
            "external": true,
            "transport": "Auto",
            "targetPort": 8080,
            "allowInsecure": false,
            "traffic": [
              {
                "latestRevision": true,
                "weight": 100
              }
            ]
          }
        },
        "template": {
          "revisionSuffix": "firstrevision",
          "containers": [
            {
              "name": "aas-repository",
              "image": "ghcr.io/digitaltwinconsortium/aas-repository:masterv3",
              "env": [
                {
                  "name": "ADX_HOST",
                  "value": "[reference(resourceId('Microsoft.Kusto/clusters', variables('adxClusterName')), '2022-02-01').uri]"
                },
                {
                  "name": "ADX_DB",
                  "value": "ontologies"
                },
                {
                  "name": "AAD_APPLICATION_ID",
                  "value": "[reference(concat(parameters('resourcesName'), '-Identity')).clientId]"
                },
                {
                  "name": "CALCULATE_PCF",
                  "value": "1"
                },
                {
                  "name": "WATTTIME_USER",
                  "value": ""
                },
                {
                  "name": "WATTTIME_PASSWORD",
                  "secretRef": "watttimepassword"
                },
                {
                  "name": "ServicePassword",
                  "secretRef": "servicepassword"
                }
              ],
              "resources": {
                "cpu": "2",
                "memory": "4Gi"
              }
            }
          ],
          "scale": {
            "minReplicas": "1",
            "maxReplicas": "1"
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.App/managedEnvironments', concat(parameters('resourcesName'), '-AppEnvironment'))]",
        "[resourceId('Microsoft.Kusto/clusters/databases/scripts', variables('adxClusterName'), 'ontologies', 'OPCUA-parsing-script')]"
      ]
    },
    {
      "type": "Microsoft.App/containerApps",
      "apiVersion": "2024-03-01",
      "name": "[concat(parameters('resourcesName'), '-ua-cloud-action')]",
      "location": "[resourceGroup().location]",
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', concat(parameters('resourcesName'), '-Identity'))]": {}
        }
      },
      "properties": {
        "workloadProfileName": "Consumption",
        "managedEnvironmentId": "[resourceId('Microsoft.App/managedEnvironments', concat(parameters('resourcesName'), '-AppEnvironment'))]",
        "configuration": {
          "secrets": [
            {
              "name": "adminpassword",
              "keyVaultUrl": "[concat('https://', parameters('resourcesName'), '-KV.vault.azure.net/secrets/adminpassword')]",
              "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', concat(parameters('resourcesName'), '-Identity'))]"
            },
            {
              "name": "brokerpassword",
              "keyVaultUrl": "[concat('https://', parameters('resourcesName'), '-KV.vault.azure.net/secrets/brokerpassword')]",
              "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', concat(parameters('resourcesName'), '-Identity'))]"
            }
          ],
          "ingress": {
            "external": true,
            "transport": "Auto",
            "targetPort": 80,
            "allowInsecure": false,
            "traffic": [
              {
                "latestRevision": true,
                "weight": 100
              }
            ]
          }
        },
        "template": {
          "revisionSuffix": "firstrevision",
          "containers": [
            {
              "name": "ua-cloud-action",
              "image": "ghcr.io/opcfoundation/ua-cloudaction:main",
              "env": [
                {
                  "name": "ADMIN_USERNAME",
                  "value": "[parameters('adminUsername')]"
                },
                {
                  "name": "ADMIN_PASSWORD",
                  "secretRef": "adminpassword"
                },
                {
                  "name": "ADX_INSTANCE_URL",
                  "value": "[reference(resourceId('Microsoft.Kusto/clusters', variables('adxClusterName')), '2022-02-01').uri]"
                },
                {
                  "name": "ADX_DB_NAME",
                  "value": "ontologies"
                },
                {
                  "name": "ADX_TABLE_NAME",
                  "value": "opcua_telemetry"
                },
                {
                  "name": "AAD_TENANT_ID",
                  "value": "[subscription().tenantId]"
                },
                {
                  "name": "APPLICATION_ID",
                  "value": "[reference(concat(parameters('resourcesName'), '-Identity')).clientId]"
                },
                {
                  "name": "APPLICATION_KEY",
                  "value": ""
                },
                {
                  "name": "BROKER_NAME",
                  "value": "[concat(parameters('resourcesName'), '-EventHubs.servicebus.windows.net')]"
                },
                {
                  "name": "BROKER_USERNAME",
                  "value": "$ConnectionString"
                },
                {
                  "name": "BROKER_PASSWORD",
                  "secretRef": "brokerpassword"
                },
                {
                  "name": "TOPIC",
                  "value": "commander.command"
                },
                {
                  "name": "RESPONSE_TOPIC",
                  "value": "commander.response"
                },
                {
                  "name": "UA_SERVER_ENDPOINT",
                  "value": "opc.tcp://assembly.seattle/"
                },
                {
                  "name": "UA_SERVER_METHOD_ID",
                  "value": "ns=2;i=435"
                },
                {
                  "name": "UA_SERVER_OBJECT_ID",
                  "value": "ns=2;i=424"
                },
                {
                  "name": "UA_SERVER_APPLICATION_NAME",
                  "value": "assembly"
                },
                {
                  "name": "UA_SERVER_LOCATION_NAME",
                  "value": "seattle"
                }
              ],
              "resources": {
                "cpu": "0.5",
                "memory": "1Gi"
              }
            }
          ],
          "scale": {
            "minReplicas": "1",
            "maxReplicas": "1"
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.App/managedEnvironments', concat(parameters('resourcesName'), '-AppEnvironment'))]",
        "[resourceId('Microsoft.Kusto/clusters/databases/scripts', variables('adxClusterName'), 'ontologies', 'OPCUA-parsing-script')]"
      ]
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2020-11-01",
      "name": "[concat(parameters('resourcesName'), '-IPAddress')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "publicIPAllocationMethod": "Static",
        "dnsSettings": {
          "domainNameLabel": "[concat(parameters('resourcesName'), 'domain')]"
        }
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2020-11-01",
      "name": "[concat(parameters('resourcesName'), '-NSG')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "securityRules": [
          {
            "name": "default-allow-3389",
            "properties": {
              "priority": 1000,
              "access": "Allow",
              "direction": "Inbound",
              "destinationPortRange": "3389",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2020-11-01",
      "name": "[concat(parameters('resourcesName'), '-Network')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[concat(parameters('resourcesName'), '-Subnet')]",
            "properties": {
              "addressPrefix": "[variables('subnetPrefix')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat(parameters('resourcesName'), '-NSG'))]"
              }
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', concat(parameters('resourcesName'), '-NSG'))]"
      ]
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2020-11-01",
      "name": "[concat(parameters('resourcesName'), '-Network-CA')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[concat(parameters('resourcesName'), '-Subnet-CA')]",
            "properties": {
              "addressPrefix": "[variables('subnetPrefix2')]",
              "delegations": [
                {
                  "name": "appServiceDelegation",
                  "properties": {
                    "serviceName": "Microsoft.App/environments"
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2020-11-01",
      "name": "[concat(parameters('resourcesName'), '-IF')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', concat(parameters('resourcesName'), '-IPAddress'))]"
              },
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', concat(parameters('resourcesName'), '-Network'), concat(parameters('resourcesName'), '-Subnet'))]"
              }
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', concat(parameters('resourcesName'), '-IPAddress'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', concat(parameters('resourcesName'), '-Network'))]"
      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2022-11-01",
      "name": "[concat(parameters('resourcesName'), '-VM')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "hardwareProfile": {
          "vmSize": "Standard_D4s_v4"
        },
        "osProfile": {
          "computerName": "[parameters('resourcesName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "windowsConfiguration": {
            "provisionVMAgent": true,
            "enableAutomaticUpdates": false
          }
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "MicrosoftWindowsDesktop",
            "offer": "Windows-11",
            "sku": "win11-22h2-ent",
            "version": "latest"
          },
          "osDisk": {
            "createOption": "FromImage",
            "caching": "ReadWrite",
            "managedDisk": {
              "storageAccountType": "StandardSSD_LRS"
            },
            "deleteOption": "Delete",
            "diskSizeGB": 127
          },
          "dataDisks": []
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(parameters('resourcesName'), '-IF'))]"
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces', concat(parameters('resourcesName'), '-IF'))]"
      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(parameters('resourcesName'), '-VM','/Bootstrap')]",
      "apiVersion": "2022-11-01",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', parameters('resourcesName'), '-VM')]"
      ],
      "tags": {
        "displayName": "Run Bootstrap"
      },
      "properties": {
        "publisher": "Microsoft.Compute",
        "type": "CustomScriptExtension",
        "typeHandlerVersion": "1.10",
        "autoUpgradeMinorVersion": true,
        "protectedSettings": {
          "fileUris": [
            "[uri('https://raw.githubusercontent.com/digitaltwinconsortium/ManufacturingOntologies/main/Deployment/', 'Bootstrap.ps1')]"
          ],
          "commandToExecute": "powershell.exe -ExecutionPolicy Unrestricted -File Bootstrap.ps1"
        }
      }
    },
    {
      "type": "Microsoft.Kusto/clusters",
      "apiVersion": "2021-01-01",
      "name": "[variables('adxClusterName')]",
      "sku": {
        "name": "Standard_D11_v2",
        "tier": "Standard",
        "capacity": 2
      },
      "location": "[resourceGroup().location]",
      "tags": {
        "Created By": "GitHub quickstart template"
      },
      "properties": {
        "trustedExternalTenants": [
          {
            "value": "*"
          }
        ],
        "enableDiskEncryption": false,
        "enableStreamingIngest": true,
        "enablePurge": false,
        "enableDoubleEncryption": false,
        "engineType": "V3"
      }
    },
    {
      "type": "Microsoft.Kusto/clusters/databases",
      "apiVersion": "2021-01-01",
      "name": "[format('{0}/{1}', variables('adxClusterName'), 'ontologies')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Kusto/clusters', variables('adxClusterName'))]"
      ],
      "properties": {
        "softDeletePeriodInDays": 365,
        "hotCachePeriodInDays": 31
      },
      "kind": "ReadWrite"
    },
    {
      "type": "Microsoft.Kusto/Clusters/Databases/DataConnections",
      "apiVersion": "2022-12-29",
      "name": "[format('{0}/{1}/{2}', variables('adxClusterName'), 'ontologies','EventHubDataConnection')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Kusto/clusters/databases/scripts', variables('adxClusterName'), 'ontologies', 'OPCUA-parsing-script')]"
      ],
      "kind": "EventHub",
      "properties": {
        "eventHubResourceId": "[resourceId('Microsoft.EventHub/namespaces/eventhubs', concat(parameters('resourcesName'), '-EventHubs'), 'data')]",
        "consumerGroup": "adx",
        "tableName": "opcua_raw",
        "mappingRuleName": "opcua_mapping",
        "dataFormat": "MULTIJSON",
        "eventSystemProperties": [],
        "compression": "None",
        "databaseRouting": "Single"
      }
    },
    {
      "type": "Microsoft.Kusto/Clusters/Databases/DataConnections",
      "apiVersion": "2022-12-29",
      "name": "[format('{0}/{1}/{2}', variables('adxClusterName'), 'ontologies','EventHubMetadataConnection')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Kusto/clusters/databases/scripts', variables('adxClusterName'), 'ontologies', 'OPCUA-parsing-script')]"
      ],
      "kind": "EventHub",
      "properties": {
        "eventHubResourceId": "[resourceId('Microsoft.EventHub/namespaces/eventhubs', concat(parameters('resourcesName'), '-EventHubs'), 'metadata')]",
        "consumerGroup": "adx",
        "tableName": "opcua_metadata_raw",
        "mappingRuleName": "opcua_metadata_mapping",
        "dataFormat": "MULTIJSON",
        "eventSystemProperties": [],
        "compression": "None",
        "databaseRouting": "Single"
      }
    },
    {
      "type": "Microsoft.Kusto/clusters/databases/scripts",
      "apiVersion": "2022-12-29",
      "name": "[format('{0}/{1}/{2}', variables('adxClusterName'), 'ontologies', 'OPCUA-parsing-script')]",
      "properties": {
        "scriptContent": "// Enable streaming ingestion for the database\n.alter database ontologies policy streamingingestion enable\n\n// Create a landing table for raw OPC UA telemetry\n.create table opcua_raw(payload: dynamic)\n\n// Create mapping from JSON ingestion to the landing table\n.create-or-alter table opcua_raw ingestion json mapping 'opcua_mapping' '[{\"column\":\"payload\",\"path\":\"$\",\"datatype\":\"dynamic\"}]'\n\n// Create an intermediate table to unbatch our OPC UA PubSub messages into\n.create table opcua_intermediate(DataSetWriterID: string, Timestamp: datetime, Payload: dynamic)\n\n// Create a function to do the raw OPC UA expansion\n.create-or-alter function OPCUARawExpand() { opcua_raw | mv-expand records = payload.Messages | where records != '' | project DataSetWriterID = tostring(records[\"DataSetWriterId\"]), Timestamp = todatetime(records[\"Timestamp\"]), Payload = todynamic(records[\"Payload\"]) }\n\n// Apply the raw expansion function to the OPC UA raw table\n.alter table opcua_intermediate policy update @'[{\"Source\": \"opcua_raw\", \"Query\": \"OPCUARawExpand()\", \"IsEnabled\": \"True\"}]'\n\n// Create our final OPC UA telemetry table\n.create table opcua_telemetry (DataSetWriterID: string, Timestamp: datetime, Name: string, Value: dynamic)\n\n// Create a function to do the OPC UA dataset expansion\n.create-or-alter function OPCUADatasetExpand() { opcua_intermediate | mv-apply Payload on (extend key = tostring(bag_keys(Payload)[0]) | extend p = Payload[key] | project Name = key, Value = todynamic(p.Value)) }\n\n// Apply the dataset expansion function to the intermediate table\n.alter table opcua_telemetry policy update @'[{\"Source\": \"opcua_intermediate\", \"Query\": \"OPCUADatasetExpand()\", \"IsEnabled\": \"True\"}]'\n\n// Create a landing table for raw OPC UA metadata\n.create table opcua_metadata_raw(payload: dynamic)\n\n// Create mapping from JSON ingestion to the metadata landing table\n.create-or-alter table opcua_metadata_raw ingestion json mapping 'opcua_metadata_mapping' '[{\"column\":\"payload\",\"path\":\"$\",\"datatype\":\"dynamic\"}]'\n\n// Create an OPC UA metadata landing table\n.create table opcua_metadata(DataSetWriterID: string, Timestamp: datetime, Name: string, Type: string, DisplayName:string, Workcell: string, Line: string, Area: string, Site: string, Enterprise: string, NamespaceUri: string, NodeId: string)\n\n// Create a function to do the raw OPC UA metadata expansion\n.create-or-alter function OPCUAMetaDataExpand() { opcua_metadata_raw | parse tostring(payload.MetaData.Name) with * \":\" Workcell \".\" Line \".\" Area \".\" Site \".\" Enterprise \";nsu=\" NamespaceUri \";\" NodeId | project DataSetWriterId = tostring(payload.DataSetWriterId), Timestamp = todatetime(payload.Timestamp), Name = tostring(payload.MetaData.Name), Type = tostring(payload.MetaData.Fields[0].Description), DisplayName = tostring(payload.MetaData.Fields[0].Name), Workcell, Line, Area, Site, Enterprise, NamespaceUri, NodeId }\n\n// Apply the raw metadata expansion function to the metadata landing table\n.alter table opcua_metadata policy update @'[{\"Source\": \"opcua_metadata_raw\", \"Query\": \"OPCUAMetaDataExpand()\", \"IsEnabled\": \"True\"}]'\n\n// Create a materialized view for the last known value (LKV) of our metadata\n.create materialized-view opcua_metadata_lkv on table opcua_metadata { opcua_metadata | summarize arg_max(Timestamp, *) by Name, DataSetWriterID }\n\n.create table DTDL_models (context:string, id:string, type:string, displayname: string, description:string, comment:string, contenttype:string, contentid:string, writable:bool, schema:dynamic, contentname:string, contentdisplayname: string, contentdescription:string, contentcomment:string, target:string, extends: string, schemas:string)\n\n",
        "continueOnErrors": false
      },
      "dependsOn": [
        "[resourceId('Microsoft.Kusto/clusters/databases', variables('adxClusterName'), 'ontologies')]"
      ]
    },
    {
      "type": "Microsoft.Kusto/clusters/databases/scripts",
      "apiVersion": "2022-12-29",
      "name": "[format('{0}/{1}/{2}', variables('adxClusterName'), 'ontologies', 'OEE-calculation-script')]",
      "properties": {
        "scriptContent": ".create-or-alter function CalculateOEEForStation(stationName:string,location:string,idealCycleTime:int,shiftStartTime:datetime,shiftEndTime:datetime) {\n// calculation from https://www.oee.com/calculating-oee/\nlet idealRunningTime = (shiftEndTime - shiftStartTime) / time(1ms); // [ms]\nlet numProdEnd = toscalar(\nopcua_metadata_lkv\n| where Name contains stationName\n| where Name contains location\n| join kind=inner (opcua_telemetry\n| where Name == \"NumberOfManufacturedProducts\"\n| where Timestamp > shiftStartTime and Timestamp < shiftEndTime\n) on DataSetWriterID\n| extend numProd = toint(Value)\n| summarize max(numProd));\nlet numProdStart = toscalar(\nopcua_metadata_lkv\n| where Name contains stationName\n| where Name contains location\n| join kind=inner (opcua_telemetry\n| where Name == \"NumberOfManufacturedProducts\"\n| where Timestamp > shiftStartTime and Timestamp < shiftEndTime\n) on DataSetWriterID\n| extend numProd = toint(Value)\n| summarize min(numProd));\nlet numScrapEnd = toscalar(\nopcua_metadata_lkv\n| where Name contains stationName\n| where Name contains location\n| join kind=inner (opcua_telemetry\n| where Name == \"NumberOfDiscardedProducts\"\n| where Timestamp > shiftStartTime and Timestamp < shiftEndTime\n) on DataSetWriterID\n| extend numDisc = toint(Value)\n| summarize max(numDisc));\nlet numScrapStart = toscalar(\nopcua_metadata_lkv\n| where Name contains stationName\n| where Name contains location\n| join kind=inner (opcua_telemetry\n| where Name == \"NumberOfDiscardedProducts\"\n| where Timestamp > shiftStartTime and Timestamp < shiftEndTime\n) on DataSetWriterID\n| extend numDisc = toint(Value)\n| summarize min(numDisc));\nlet numProdShift = numProdEnd - numProdStart;\nlet numScrapShift = numScrapEnd - numScrapStart;\nlet actualCycleTime = toscalar(\nopcua_metadata_lkv\n| where Name contains stationName\n| where Name contains location\n| join kind=inner (opcua_telemetry\n| where Name == \"ActualCycleTime\"\n| where Timestamp > shiftStartTime and Timestamp < shiftEndTime\n) on DataSetWriterID\n| extend cycleTime = toint(Value)\n| summarize avg(cycleTime));\nlet faultyTimeShift = toscalar(\nopcua_metadata_lkv\n| where Name contains stationName\n| where Name contains location\n| join kind=inner (opcua_telemetry\n| where Name == \"FaultyTime\"\n| where Timestamp > shiftStartTime and Timestamp < shiftEndTime\n) on DataSetWriterID\n| extend faultyTime = toint(Value)\n| summarize sum(faultyTime));\nlet availability = todouble(idealRunningTime - faultyTimeShift) / todouble(idealRunningTime);\nlet performance = todouble(idealCycleTime) * todouble(numProdShift + numScrapShift) / todouble(idealRunningTime - faultyTimeShift);\nlet quality = todouble(numProdShift) / todouble(numProdShift + numScrapShift);\nlet oee = availability * performance * quality;\ntoscalar(oee)\n}\n\n.create-or-alter function CalculateOEEForLine(location:string,idealCycleTime:int,shiftStartTime:datetime,shiftEndTime:datetime) {\nlet stations = opcua_metadata_lkv\n| where Site == location\n| where Workcell !=\"publisher\"\n| summarize by Workcell\n| project station = tostring(Workcell);\nlet oeeForStations = stations\n| partition hint.strategy=legacy by station\n(\n  extend oee = toscalar(CalculateOEEForStation(station, location, idealCycleTime, shiftStartTime, shiftEndTime))\n)\n| summarize min(oee);\ntoscalar(oeeForStations)\n}\n\n",
        "continueOnErrors": false
      },
      "dependsOn": [
        "[resourceId('Microsoft.Kusto/clusters/databases/scripts', variables('adxClusterName'), 'ontologies', 'OPCUA-parsing-script')]"
      ]
    },
    {
      "type": "Microsoft.EventHub/namespaces",
      "apiVersion": "2021-11-01",
      "name": "[variables('eventHubsNamespaceName')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Standard",
        "tier": "Standard",
        "capacity": 1
      },
      "properties": {
        "isAutoInflateEnabled": true,
        "maximumThroughputUnits": 16,
        "minimumTlsVersion": "1.2"
      }
    },
    {
      "type": "Microsoft.EventHub/namespaces/eventhubs",
      "apiVersion": "2021-11-01",
      "name": "[concat(parameters('resourcesName'), '-EventHubs', '/commander.command')]",
      "properties": {
        "messageRetentionInDays": 1,
        "partitionCount": 1
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces', concat(parameters('resourcesName'), '-EventHubs'))]"
      ]
    },
    {
      "type": "Microsoft.EventHub/namespaces/eventhubs",
      "apiVersion": "2021-11-01",
      "name": "[concat(parameters('resourcesName'), '-EventHubs', '/commander.response')]",
      "properties": {
        "messageRetentionInDays": 1,
        "partitionCount": 1
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces', concat(parameters('resourcesName'), '-EventHubs'))]"
      ]
    },
    {
      "type": "Microsoft.EventHub/namespaces/eventhubs",
      "apiVersion": "2021-11-01",
      "name": "[concat(parameters('resourcesName'), '-EventHubs', '/data')]",
      "properties": {
        "messageRetentionInDays": 1,
        "partitionCount": 1
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces', concat(parameters('resourcesName'), '-EventHubs'))]"
      ]
    },
    {
      "type": "Microsoft.EventHub/namespaces/eventhubs",
      "apiVersion": "2021-11-01",
      "name": "[concat(parameters('resourcesName'), '-EventHubs', '/metadata')]",
      "properties": {
        "messageRetentionInDays": 1,
        "partitionCount": 1
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces', concat(parameters('resourcesName'), '-EventHubs'))]"
      ]
    },
    {
      "type": "Microsoft.EventHub/namespaces/eventhubs/consumergroups",
      "apiVersion": "2021-11-01",
      "name": "[format('{0}/{1}/{2}', concat(parameters('resourcesName'), '-EventHubs'), 'data', 'adx')]",
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces/eventhubs', concat(parameters('resourcesName'), '-EventHubs'), 'data')]"
      ],
      "properties": {}
    },
    {
      "type": "Microsoft.EventHub/namespaces/eventhubs/consumergroups",
      "apiVersion": "2021-11-01",
      "name": "[format('{0}/{1}/{2}', concat(parameters('resourcesName'), '-EventHubs'), 'metadata', 'adx')]",
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces/eventhubs', concat(parameters('resourcesName'), '-EventHubs'), 'metadata')]"
      ],
      "properties": {}
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "name": "[concat(parameters('resourcesName'), '-Identity')]",
      "apiVersion": "2018-11-30",
      "location": "[resourceGroup().location]"
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-10-01-preview",
      "name": "[guid(variables('keyVaultSecretsUserId'), resourceGroup().id)]",
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', concat(parameters('resourcesName'), '-Identity'))]"
      ],
      "properties": {
        "roleDefinitionId": "[variables('keyVaultSecretsUserId')]",
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', concat(parameters('resourcesName'), '-Identity')), '2018-11-30').principalId]",
        "principalType": "ServicePrincipal"
      }
    },
    {
      "type": "Microsoft.Kusto/clusters/databases/principalAssignments",
      "apiVersion": "2021-01-01",
      "name": "[format('{0}/{1}/{2}', variables('adxClusterName'), 'ontologies', guid(resourceId('Microsoft.Kusto/clusters/databases', split(format('{0}/{1}', variables('adxClusterName'), 'ontologies'), '/')[0], split(format('{0}/{1}', variables('adxClusterName'), 'ontologies'), '/')[1]), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', concat(parameters('resourcesName'), '-Identity')), 'Admin'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Kusto/clusters/databases', variables('adxClusterName'), 'ontologies')]"
      ],
      "properties": {
        "principalId": "[reference(concat(parameters('resourcesName'), '-Identity')).principalId]",
        "role": "Admin",
        "tenantId": "[reference(concat(parameters('resourcesName'), '-Identity')).tenantId]",
        "principalType": "App"
      }
    }
  ]
}
